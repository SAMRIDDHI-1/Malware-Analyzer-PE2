import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter.scrolledtext import ScrolledText
import os
import mimetypes
from datetime import datetime
import magic


class ExternalBasedChecking:
    def __init__(self):
        self.device_path = ""

        self.root = tk.Tk()
        self.root.title("External Storage Checker")

        self.title_label = tk.Label(self.root, text="External Storage Information", font=("Helvetica", 16))
        self.title_label.pack(pady=10)

        self.input_frame = ttk.Frame(self.root)
        self.input_frame.pack(pady=10)

        self.device_label = ttk.Label(self.input_frame, text="Enter External Device Directory:")
        self.device_label.grid(row=0, column=0, padx=5, pady=5)

        self.device_directory_entry = ttk.Entry(self.input_frame, width=30)
        self.device_directory_entry.grid(row=0, column=1, padx=5, pady=5)

        self.detect_button = ttk.Button(self.input_frame, text="Detect Path", command=self.detect_external_device)
        self.detect_button.grid(row=0, column=2, padx=5, pady=5)

        self.text_area = ScrolledText(self.root, width=80, height=20, wrap=tk.WORD)
        self.text_area.pack(pady=10)

        self.refresh_button = ttk.Button(self.root, text="Refresh", command=self.check_for_external_storage)
        self.refresh_button.pack(pady=10)
        self.refresh_button.config(state=tk.DISABLED)

        # Standard magic numbers for comparison
        self.standard_magic_numbers = {
            "JPEG": "JPEG image data",
            "PNG": "PNG image data",
            "PDF": "PDF document",
            # Add more as needed
        }

    def detect_external_device(self):
        user_input = self.device_directory_entry.get().strip()
        if os.path.exists(user_input) and os.path.isdir(user_input):
            self.device_path = user_input
            self.refresh_button.config(state=tk.NORMAL)
            messagebox.showinfo("Success", "External device path set successfully.")
        else:
            messagebox.showerror("Error", "Invalid directory. Please enter a valid directory.")

    def check_for_external_storage(self):
        if not self.device_path:
            messagebox.showerror("Error", "Please set the external device path first.")
            return

        self.text_area.delete("1.0", tk.END)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.text_area.insert(tk.END, f"Time: {timestamp}\n\n")

        for root, dirs, files in os.walk(self.device_path):
            self.text_area.insert(tk.END, f"File system: {root}\n")
            for file_name in files:
                file_path = os.path.join(root, file_name)
                self.text_area.insert(tk.END, f"  File: {file_path}\n")

                # Detect magic number for the file
                magic_detector = magic.Magic()
                magic_number = magic_detector.from_file(file_path)
                self.text_area.insert(tk.END, f"    Magic Number: {magic_number}\n")
                self.text_area.insert(tk.END,f"MAGIC NUMBER : {magic_detector}\n")

                # Compare detected magic number with standard ones
                matched_type = None
                for file_type, standard_magic in self.standard_magic_numbers.items():
                    if standard_magic in magic_number:
                        matched_type = file_type
                        break

                if matched_type:
                    self.text_area.insert(tk.END, f"    Detected as {matched_type}\n")
                else:
                    self.text_area.insert(tk.END, "    File type not recognized\n")

                # Check if the file is malicious based on file name
                if self.is_malicious(file_name):
                    self.text_area.insert(tk.END, "    *** MALICIOUS FILE DETECTED ***\n")

                # Check if the file type is suspicious
                file_type = mimetypes.guess_type(file_path)[0]
                if file_type and self.is_suspicious_file_type(file_type):
                    self.text_area.insert(tk.END, "    *** SUSPICIOUS FILE TYPE ***\n")

    def is_malicious(self, file_name):
        file_name = file_name.lower()
        for signature in ["virus", "malware", "trojan", "bat", "ps1"]:
            if signature in file_name:
                return True
        return False

    def is_suspicious_file_type(self, file_type):
        suspicious_types = [
            "application/x-msdownload", "application/x-executable", "application/x-dosexec",
            "application/vnd.ms-cab-compressed", "application/x-java-archive", "application/x-msdos-program",
            "application/x-php", "application/x-shellscript", "application/x-python", "application/x-powershell",
            "application/javascript", "text/vbscript", "application/x-bat", "application/x-ms-bat",
            "application/x-mspowershell", "application/x-sh", "text/x-perl", "text/x-python",
            "text/x-shellscript"
        ]
        return file_type in suspicious_types

    def display(self):
        self.root.mainloop()


if __name__ == "__main__":
    gui = ExternalBasedChecking()
    gui.display()

