import javax.swing.*;
import java.awt.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ExternalStorageCheckerGUI {
    private JFrame frame;
    private JTextArea textArea;
    private JLabel titleLabel;
    private JButton refreshButton;
    private JTextField deviceDirectoryField;
    private JButton detectButton;

    private String devicePath;

    public ExternalStorageCheckerGUI() {
        frame = new JFrame("External Storage Checker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());

        // Title Label
        titleLabel = new JLabel("External Storage Information");
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        frame.add(titleLabel, BorderLayout.NORTH);

        // Device Directory Field and Detect Button
        JPanel inputPanel = new JPanel(new FlowLayout());
        JLabel deviceLabel = new JLabel("Enter External Device Directory:");
        deviceDirectoryField = new JTextField(20);
        detectButton = new JButton("Detect Path");
        detectButton.addActionListener(e -> detectExternalDevice());
        inputPanel.add(deviceLabel);
        inputPanel.add(deviceDirectoryField);
        inputPanel.add(detectButton);
        frame.add(inputPanel, BorderLayout.SOUTH);

        // Text Area
        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setForeground(Color.YELLOW);
        textArea.setBackground(Color.BLACK);
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Refresh Button
        refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> checkForExternalStorage());
        frame.add(refreshButton, BorderLayout.EAST);

        // Initially disable refresh button
        refreshButton.setEnabled(false);
    }

    private void detectExternalDevice() {
        String userInput = deviceDirectoryField.getText().trim();
        Path userPath = Paths.get(userInput);
        if (Files.exists(userPath) && Files.isDirectory(userPath)) {
            devicePath = userPath.toString();
            refreshButton.setEnabled(true);
            JOptionPane.showMessageDialog(frame, "External device path set successfully.", "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "Invalid directory. Please enter a valid directory.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public void display() {
        frame.setVisible(true);
    }

    public void checkForExternalStorage() {
        if (devicePath == null || devicePath.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Please set the external device path first.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder result = new StringBuilder();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        Iterable<Path> roots = FileSystems.getDefault().getRootDirectories();
        String timestamp = dateFormat.format(new Date());
        result.append("Time: ").append(timestamp);
        for (Path root : roots) {
            try {
                FileStore store = Files.getFileStore(root);
                String type = store.type();

                // Append the details to the result string
                result.append("\n\nFile system: ").append(root).append("\n");
                result.append("  Type: ").append(type).append("\n");
                result.append("  Total space: ").append(store.getTotalSpace() / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");
                result.append("  Used space: ").append((store.getTotalSpace() - store.getUsableSpace()) / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");
                result.append("  Free: ").append((store.getUsableSpace()) / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");

                // Append directories and files from the specified external device path
                Path devicePath = Paths.get(this.devicePath);
                Files.walkFileTree(devicePath, new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        result.append("    File: ").append(file).append("\n");
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                        result.append("    Directory: ").append(dir).append("\n");
                        return FileVisitResult.CONTINUE;
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        textArea.setText(result.toString());
    }

    public static void main(String[] args) {
        ExternalStorageCheckerGUI gui = new ExternalStorageCheckerGUI();
        gui.display();
    }
}
